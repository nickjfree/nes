use std::ops::{Deref, DerefMut};
use std::cell::RefCell;
use std::rc::Rc;
use crate::board::{ Ram, Signal };


const PPUCTRL: u16    = 0x2000;
const PPUMASK: u16    = 0x2001;
const PPUSTATUS: u16  = 0x2002;
const OAMADDR: u16    = 0x2003;
const OAMDATA: u16    = 0x2004;
const PPUSCROLL: u16  = 0x2005;
const PPUADDR: u16    = 0x2006;
const PPUDATA: u16    = 0x2007;
const OAMDMA: u16     = 0x4014;

// sprite in oam
trait Sprite {
    fn x(&self) -> u8;
    fn y(&self) -> u8;
    fn pattern_index(&self) -> u8;
}

impl Sprite for [u8; 4] {

    fn y(&self) -> u8 {
        self[0]
    }

    fn x(&self) -> u8 {
        self[3]
    }

    fn pattern_index(&self) -> u8 {
        self[1] >> 1
    }
}

// ppu oam
struct OAM {
    sprites: Vec<[u8; 4]>,
}

impl OAM {
    fn new(size: usize) -> Self {
        Self{
            sprites: vec![[0, 0, 0, 0]; size],
        }
    }
}

impl Default for OAM {
    fn default() -> Self {
        Self{
            sprites: vec![[0, 0, 0, 0]; 64],
        }
    }
}

impl Deref for OAM {

    type Target = Vec<[u8; 4]>;

    fn deref(&self) -> &Self::Target {
        &self.sprites
    }
}

impl DerefMut for OAM {

    fn deref_mut(&mut self) -> &mut Vec<[u8; 4]> {
        &mut self.sprites
    }
}

// ppu bus
//
//
// vram space 16K
// $0000-$0FFF  $1000   Pattern table 0
// $1000-$1FFF  $1000   Pattern table 1
// $2000-$23FF  $0400   Nametable 0
// $2400-$27FF  $0400   Nametable 1
// $2800-$2BFF  $0400   Nametable 2
// $2C00-$2FFF  $0400   Nametable 3
// $3000-$3EFF  $0F00   Mirrors of $2000-$2EFF
// $3F00-$3F1F  $0020   Palette RAM indexes
// $3F20-$3FFF  $00E0   Mirrors of $3F00-$3F1F
#[derive(Default)]
struct PPUBus {
    // let's start simple
    // use ram first then change them to mappers
    parttern_table: Ram,
    name_table: Ram,
    pallette: Ram,
}

impl PPUBus {

    pub fn new() -> Self {
        Self {
            parttern_table: Ram::new(8192),
            name_table: Ram::new(2048),
            pallette: Ram::new(32),
        }
    }

    pub fn read_u8(&mut self, addr: u16) -> u8 {
        match addr {
            0x0000..=0x1fff => {
                self.parttern_table.read_u8(addr)
            },
            0x2000..=0x3eff => {
                self.name_table.read_u8(addr - 0x2000)
            },
            0x3f00..=0x3fff => {
                self.pallette.read_u8(addr - 0x3f00)
            },
            _ => panic!("read vram address {:#02x}", addr),
        }
    }

    pub fn write_u8(&mut self, addr: u16, val: u8) -> u32 {
        match addr {
            0x0000..=0x1fff => {
                self.parttern_table.write_u8(addr, val);
            },
            0x2000..=0x3eff => {
                self.name_table.write_u8(addr - 0x2000, val);
            },
            0x3f00..=0x3fff => {
                self.pallette.write_u8(addr - 0x3f00, val);
            },
            _ => panic!("read vram address {:#02x}", addr),
        }
        0
    }
}

// ppu internal registers
#[derive(Default, Debug)]
struct PPURegisters {
    // oam addr
    oam_addr: u8,
    // vram data read buffer
    vram_read_buffer: u8,
    // current vram address
    v: u16,
    // tempoeray vram address
    t: u16,
    // fine x scroll
    x: u8,
    // write toggle
    w: u8,
    // bus data
    bus_data: u8,
}


impl PPURegisters {
    
    fn inc_hori_v(&mut self) {
        let coarse_x = self.v & 0x001f;
        match coarse_x {
            31 => {
                self.v &= !0x001f;
                self.v ^= 0x0400;
            },
            _ => {
                self.v = self.v.wrapping_add(1);
            }
        }
    }

    fn inc_vert_v(&mut self) {
        let fine_y = self.v & 0x7000;
        match fine_y {
            0x7000 => {
                // finey = 0
                self.v &= !0x7000; 
                let y = (self.v & 0x03e0)  >> 5;
                let coarse_y = match y {
                    29 => {self.v ^= 0x8000; 0},
                    31 => 0,
                    _ => y.wrapping_add(1),
                };
                self.v = (self.v & !0x03e0) | (coarse_y << 5);
            },
            _ => { 
                // fine y < 7
                self.v = self.v.wrapping_add(0x1000);
            },
        }
    }

    fn copy_hori_t(&mut self) {
        // hori(v) = hori(t)
        // v: .....F.. ...EDCBA = t: .....F.. ...EDCBA
        self.v = (self.v & 0xFBE0) | (self.t & 0x041F);
    }

    fn copy_vert_t(&mut self) {
        // vert(v) = vert(t)
        // v: .IHGF.ED CBA..... = t: .IHGF.ED CBA.....
        self.v = (self.v & 0x841f) | (self.t & 0x7be0);
    }
}



// ppu rendering status
#[derive(Default, Debug)]
struct RenderStatus {

    // rendering mask
    greyscale: bool,
    show_left_background: bool,
    show_left_sprite: bool,
    show_background: bool,
    show_sprite: bool,
    // TODO: color emphasize mode not implemented

    // current scanline
    scanline: u16,
    // current cycle
    cycle: u16,
    // sprite overflow flag
    sprite_overflow: bool,
    // sprite 0 hit flag
    sprite_0_hit: bool,
    // frame number
    frame_number: u32,
    // nt tile byte
    tile_index: u8,
    // at data
    at_data: u8,
    // tile low
    tile_low: u8,
    // tile high
    tile_high: u8,
    // shift register for 2 tiles, with pallette index
    tile_data: u64,
}


impl RenderStatus {

    // render enabled
    fn is_render_enabled(&self) -> bool {
        self.show_background | self.show_sprite
    }

    // is in odd frame
    fn is_odd_frame(&self) -> bool {
        (self.frame_number % 2) != 0
    }

    // advance cycle
    fn inc_cycle(&mut self) -> bool {
        self.cycle += 1;
        if self.cycle > 340 {
            self.cycle = 0;
            self.scanline += 1;
            if self.scanline > 261 {
                self.scanline = 0;
                self.frame_number = self.frame_number.wrapping_add(1);
                return true
            }
        }
        false
    }
}




// ppu
#[derive(Default)]
pub struct PPU {

       
    // ppu bus
    ppu_bus: PPUBus,

    // ppu registers
    regs: PPURegisters,

    // OAM
    oam: OAM,

    // render status
    rs: RenderStatus,

    // output buffer
    output: Vec<u8>,
    // ppu contrl flags
    // nmi enabled 0: off 1: on
    nmi_enabled: bool,  
    // nmi occurred status
    nmi_occurred: bool,
    // previous nmi
    nmi_prev: bool,
    // nmi signal line
    nmi: Rc<RefCell<Signal>>,
    // vram address increment 0: add 1  1: add 32
    vram_increment: u16,
    // sprite szie 0: 8x8 1: 8x16
    sprite_size: u8,
    // sprite pattern selection 0: 0x0000 1: 0x1000
    sprite_table: u16,
    // backgroun pattern selection 0: 0x0000 1: 0x1000
    background_table: u16,
    // master/slave  0: read backdrop from EXT pins; 1: output color on EXT pins
    master_mode: bool, 
}


impl PPU {

    pub fn new() -> Self {
        Self{
            ppu_bus: PPUBus::new(),
            output: vec![0; 256*240*3],
            ..PPU::default()
        }
    }

    // read ppu registers
    pub fn read_u8(&mut self, addr: u16) -> u8 {
        match addr {
            // read ppu status
            //             7  bit  0
            // ---- ----
            // VSO. ....
            // |||| ||||
            // |||+-++++- PPU open bus. Returns stale PPU bus contents.
            // ||+------- Sprite overflow. The intent was for this flag to be set
            // ||         whenever more than eight sprites appear on a scanline, but a
            // ||         hardware bug causes the actual behavior to be more complicated
            // ||         and generate false positives as well as false negatives; see
            // ||         PPU sprite evaluation. This flag is set during sprite
            // ||         evaluation and cleared at dot 1 (the second dot) of the
            // ||         pre-render line.
            // |+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps
            // |          a nonzero background pixel; cleared at dot 1 of the pre-render
            // |          line.  Used for raster timing.
            // +--------- Vertical blank has started (0: not in vblank; 1: in vblank).
            //            Set at dot 1 of line 241 (the line *after* the post-render
            //            line); cleared after reading $2002 and at dot 1 of the
            //            pre-render line.
            PPUSTATUS => {
                // low 5bit is stale bus content
                let mut ret = self.regs.bus_data & 0x1f;
                if self.rs.sprite_overflow {
                    ret |= 0x20;
                }
                if self.rs.sprite_0_hit {
                    ret |= 0x40;
                }
                if self.nmi_occurred {
                    ret |= 0x80;
                }
                self.regs.w = 0;
                // read this will clear nmi
                self.nmi_occurred = false;
                ret
            },
            // read oam data
            OAMDATA => {
                0
            },
            // read ppu vram data
            PPUDATA => {
                let ret;
                let data = self.ppu_bus.read_u8(self.regs.v);

                // When reading while the VRAM address is in the range 0-$3EFF (i.e., before the palettes), the read will return the contents of an internal read buffer. 
                // This internal buffer is updated only when reading PPUDATA, and so is preserved across frames. 
                // After the CPU reads and gets the contents of the internal buffer, the PPU will immediately update the internal buffer with the byte at the current VRAM address. 
                // Thus, after setting the VRAM address, one should first read this register to prime the pipeline and discard the result.
                // Reading palette data from $3F00-$3FFF works differently. The palette data is placed immediately on the data bus, and hence no priming read is required. 
                //Reading the palettes still updates the internal buffer though, but the data placed in it is the mirrored nametable data that would appear "underneath" the palette. (Checking the PPU memory map should make this clearer.)
                match self.regs.v {
                    // buffered
                    0x0000..=0x3eff => {
                        ret = self.regs.vram_read_buffer;
                        self.regs.vram_read_buffer = data;
                    },
                    // not buffered
                    0x3f00..=0x3fff => {
                        ret = data;
                        self.regs.vram_read_buffer = data;
                    },
                    _ => panic!("read vram address {:#02x}", addr),
                }
                self.regs.v = self.regs.v.wrapping_add(self.vram_increment);
                ret
            },
            _ => 0,
        }
    }

    // write ppu registers
    pub fn write_u8(&mut self, addr: u16, val: u8) -> u32 {
        let mut delay = 0;
        self.regs.bus_data = val;
        match addr {
            // write ppu ctrl
            // 
            //             7  bit  0
            // ---- ----
            // VPHB SINN
            // |||| ||||
            // |||| ||++- Base nametable address
            // |||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
            // |||| |+--- VRAM address increment per CPU read/write of PPUDATA
            // |||| |     (0: add 1, going across; 1: add 32, going down)
            // |||| +---- Sprite pattern table address for 8x8 sprites
            // ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
            // |||+------ Background pattern table address (0: $0000; 1: $1000)
            // ||+------- Sprite size (0: 8x8 pixels; 1: 8x16 pixels – see PPU OAM#Byte 1)
            // |+-------- PPU master/slave select
            // |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
            // +--------- Generate an NMI at the start of the
            //            vertical blanking interval (0: off; 1: on)
            PPUCTRL =>  {
                // t: ...GH.. ........ <- d: ......GH
                // <used elsewhere> <- d: ABCDEF..
                self.regs.t = (self.regs.t & 0xf3ff) | (val as u16 & 0x03 << 10);
                self.vram_increment = if val & 0x04 != 0 { 32 } else { 1 };
                self.background_table = if val & 0x10 != 0 { 0x0000 } else { 0x1000 };
                self.sprite_table = if val & 0x08 != 0 { 0x0000 } else { 0x1000 };
                self.nmi_enabled = if val & 0x80 != 0 { true } else { false };
            },
            // write ppu mask
            //             7  bit  0
            // ---- ----
            // BGRs bMmG
            // |||| ||||
            // |||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
            // |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
            // |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
            // |||| +---- 1: Show background
            // |||+------ 1: Show sprites
            // ||+------- Emphasize red (green on PAL/Dendy)
            // |+-------- Emphasize green (red on PAL/Dendy)
            // +--------- Emphasize blue
            PPUMASK => {
                self.rs.greyscale = if val & 0x01 != 0 { true } else { false };
                self.rs.show_left_background = if val & 0x02 != 0 { true } else { false };
                self.rs.show_left_sprite = if val & 0x04 != 0 { true } else { false };
                self.rs.show_background = if val & 0x08 != 0 { true } else { false };
                self.rs.show_sprite = if val & 0x10 != 0 { true } else { false };
            },
            // write ppu oam addr
            OAMADDR => {
                self.regs.oam_addr = val;
            },
            // write ppu oam data
            OAMDATA => {
                let n: usize = usize::from((self.regs.oam_addr >> 2) & 0x0f);
                let m: usize = usize::from(self.regs.oam_addr & 0x0f);
                self.oam[n][m] = val;
                self.regs.oam_addr = self.regs.oam_addr.wrapping_add(1);
            },
            // write ppu scroll
            PPUSCROLL => {   
                match self.regs.w {
                    0 => {
                        // t: ....... ...ABCDE <- d: ABCDE...
                        // x:              FGH <- d: .....FGH
                        // w:                  <- 1
                        self.regs.t = (self.regs.t & 0xffe0) | ((val as u16 >> 3) & 0x1f);
                        self.regs.x = val & 0x07;
                        self.regs.w = 1;
                    },
                    1 => {
                        //     10001100 00011111
                        //  t: FGH..AB CDE..... <- d: ABCDEFGH
                        //  w:                  <- 0
                        self.regs.t = (self.regs.t & 0x8c1f) | (val as u16 & 0xf8 << 2) | (val as u16 & 0x07 << 12);
                        self.regs.w = 0;
                    },
                    _ => (),
                }
            },
            // write vram addr
            PPUADDR => {   
                match self.regs.w {
                    0 => {
                        // t: .CDEFGH ........ <- d: ..CDEFGH
                        //        <unused>     <- d: AB......
                        // t: Z...... ........ <- 0 (bit Z is cleared)
                        // w:                  <- 1     
                        self.regs.t = (self.regs.t & 0x80ff) | (val as u16 & 0x003f << 8);
                        self.regs.w = 1;
                    },
                    1 => {
                        // t: ....... ABCDEFGH <- d: ABCDEFGH
                        // v: <...all bits...> <- t: <...all bits...>
                        // w:                  <- 0
                        self.regs.t = (self.regs.t & 0xff00) | (val as u16 & 0x00ff);
                        self.regs.v = self.regs.t;
                        self.regs.w = 0;

                    },
                    _ => (),
                }


            },
            // write vram data
            PPUDATA => {
                self.ppu_bus.write_u8(self.regs.v, val);
                self.regs.v = self.regs.v.wrapping_add(self.vram_increment);
            },
            // write oam dma
            OAMDMA => {

            },
            _ => (),
        }
        delay
    }

    pub fn reset(&mut self) {
        self.rs.cycle = 340;
        self.rs.scanline = 240;
        self.rs.frame_number = 0;
        self.write_u8(PPUCTRL, 0);
        self.write_u8(PPUMASK, 0);
        self.write_u8(OAMADDR, 0);
    }

      
    fn fetch_nt(&mut self) {
        // tile address      = 0x2000 | (v & 0x0FFF)
        let addr = 0x2000 | (self.regs.v & 0x0fff);
        self.rs.tile_index = self.ppu_bus.read_u8(addr);
    }

    fn fetch_at(&mut self) {
        // attribute address = 0x23C0 | (v & 0x0C00) | ((v >> 4) & 0x38) | ((v >> 2) & 0x07)
        let addr = 0x23C0 | (self.regs.v & 0x0C00) | ((self.regs.v >> 4) & 0x38) | ((self.regs.v >> 2) & 0x07);
        let at = self.ppu_bus.read_u8(addr);
        let shift = ((self.regs.v >> 4) & 0x4) | (self.regs.v & 0x02);
        self.rs.at_data = (at >> shift & 0x03) << 2;
    }

    fn fetch_bg_tile_low(&mut self) {
        let fine_y = (self.regs.v >> 12) & 0x07;
        let addr = self.background_table.wrapping_add(self.rs.tile_index as u16 * 16 + fine_y);
        self.rs.tile_low = self.ppu_bus.read_u8(addr) ;
    }

    fn fetch_bg_tile_high(&mut self) {
        let fine_y = (self.regs.v >> 12) & 0x07;
        let addr = self.background_table.wrapping_add(self.rs.tile_index as u16 * 16 + 8 + fine_y);
        self.rs.tile_high = self.ppu_bus.read_u8(addr);
        let mut data: u32 = 0;
        // store data to shift registers
        for i in 0..8 {
            let t1 = self.rs.tile_low >> (7 - i) & 0x01;
            let t2 = self.rs.tile_high >> (7 - i) & 0x01;
            data <<= 4;
            data |= (self.rs.at_data | t1 | t2 << 1) as u32;
        }
        self.rs.tile_data |= data as u64;
    }

    // visible and pre-render line logic
    fn fetch_cycle_update(&mut self) -> u8 {
        let cycle = self.rs.cycle;
        let scanline = self.rs.scanline;
        let mut color_index: u8 = 0;
        if self.rs.is_render_enabled() {
            match cycle {
                0 => (),
                1..=256 | 321..=336 => {
                    // fetch cyeles
                    match cycle % 8 {
                        2 => self.fetch_nt(),
                        4 => self.fetch_at(),
                        6 => self.fetch_bg_tile_low(),
                        0 => { self.fetch_bg_tile_high(); self.regs.inc_hori_v();},
                        _ => (),
                    }
                },
                258..=320 => (), // TODO: sprite evaluation
                _ => (),
            }
            // draw logic
            match (scanline, cycle) {
                (0..=230, 1..=256) => {
                    color_index = ((self.rs.tile_data & 0xf000000000000000 >> 60) & 0x0f) as u8;
                    
                    self.rs.tile_data <<= 4;
                    // set output
                    let (x, y) = (cycle as u32 - 1, scanline as u32);
                    self.output[(y * 256 * 3 + x) as usize] = color_index;
                    self.output[(y * 256 * 3 + x + 1) as usize] = color_index;
                    self.output[(y * 256 * 3 + x + 2) as usize] = color_index;
                },
                _ => (),
            }
        }
        // special logic
        match (scanline, cycle) {
            (_, 257) => self.regs.copy_hori_t(),
            (_, 256) => self.regs.inc_vert_v(),
            (261, 1) => {
                self.nmi_occurred = false;
                self.rs.sprite_overflow = false;
                self.rs.sprite_0_hit = false;
            },
            (261, 280..=304) => self.regs.copy_vert_t(),
            (261, 339) => {
                if self.rs.is_odd_frame() && self.rs.is_render_enabled() {
                    // skip cycle on odd frams
                    self.rs.inc_cycle();
                }
            },
            _ => (),
        }
        color_index
    }

    fn vblank_cycle_update(&mut self) {
        match (self.rs.scanline, self.rs.cycle) {
            (241, 1) => {
                self.nmi_occurred = true;
            },
            _ => (),
        }
    }

    // update nmi status
    fn update_nmi(&mut self) {
        let nmi_current = self.nmi_occurred && self.nmi_enabled;
        if nmi_current && !self.nmi_prev {
            *self.nmi.borrow_mut() = 1;
        }
        self.nmi_prev = nmi_current;
    }

    // step simulation
    pub fn step(&mut self) -> u8 {
        self.vblank_cycle_update();
        self.fetch_cycle_update();
        self.update_nmi();
        match self.rs.inc_cycle() {
            true => {
                // println!("{:?}", (self.rs.scanline, self.rs.cycle));
                1
            },
            _ => 0,
        }
    }

    pub fn get_output(&self) -> &[u8] {
        &self.output
    }


    pub fn load_test_data(&mut self) {
        let chr = vec![
            0x03, 0x0f, 0x1f, 0x1f, 0x1c, 0x24, 0x26, 0x66, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x3f, 0x7f,  
            0xe0, 0xc0, 0x80, 0xfc, 0x80, 0xc0, 0x00, 0x20, 0x00, 0x20, 0x60, 0x00, 0xf0, 0xfc, 0xfe, 0xfe,  
            0x60, 0x70, 0x18, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0x1f, 0x07, 0x00, 0x1e, 0x3f, 0x7f,  
            0xfc, 0x7c, 0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xf8, 0xc0, 0xc2, 0x67, 0x2f, 0x37,  
            0x7f, 0x7f, 0xff, 0xff, 0x07, 0x07, 0x0f, 0x0f, 0x7f, 0x7e, 0xfc, 0xf0, 0xf8, 0xf8, 0xf0, 0x70,  
            0xfd, 0xfe, 0xb4, 0xf8, 0xf8, 0xf9, 0xfb, 0xff, 0x37, 0x36, 0x5c, 0x00, 0x00, 0x01, 0x03, 0x1f,  
            0x1f, 0x3f, 0xff, 0xff, 0xfc, 0x70, 0x70, 0x38, 0x08, 0x24, 0xe3, 0xf0, 0xf8, 0x70, 0x70, 0x38,  
            0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x01, 0x07, 0x0f, 0x0f, 0x0e, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f,  
            0x00, 0x00, 0xf0, 0xe0, 0xc0, 0xfe, 0x40, 0x60, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0xf8, 0xfe,  
            0x13, 0x33, 0x30, 0x18, 0x04, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x1f, 0x07, 0x08, 0x17, 0x17,  
            0x00, 0x10, 0x7e, 0x3e, 0x00, 0x00, 0xc0, 0xe0, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xe0, 0x40, 0xa0,  
            0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x37, 0x27, 0x23, 0x03, 0x01, 0x00, 0x00, 0x00,  
            0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xcc, 0xff, 0xff, 0xff, 0xff, 0x70, 0x00, 0x08,  
            0xff, 0xff, 0xff, 0xfe, 0xf0, 0xc0, 0x80, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xc0, 0x80, 0x00,  
            0xfc, 0xfc, 0xf8, 0x78, 0x78, 0x78, 0x7e, 0x7e, 0x10, 0x60, 0x80, 0x00, 0x78, 0x78, 0x7e, 0x7e,  
            0x00, 0x03, 0x0f, 0x1f, 0x1f, 0x1c, 0x24, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x3f,  
            0x00, 0xe0, 0xc0, 0x80, 0xfc, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x60, 0x00, 0xf0, 0xfc, 0xfe,  
            0x66, 0x60, 0x30, 0x18, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x3f, 0x1f, 0x00, 0x16, 0x2f, 0x2f,  
            0x20, 0xfc, 0x7c, 0x00, 0x00, 0xe0, 0xe0, 0xf0, 0xfe, 0xfc, 0xfc, 0xf8, 0xc0, 0x60, 0x20, 0x30,  
            0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x2f, 0x2f, 0x2f, 0x0f, 0x07, 0x03, 0x00, 0x00,  
            0xf0, 0x90, 0x00, 0x08, 0x0c, 0x1c, 0xfc, 0xf8, 0x10, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0xe0,  
            0x0f, 0x0f, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x03, 0x01, 0x03, 0x01, 0x04, 0x07, 0x0f, 0x0f, 0x03,  
            0xf8, 0xf0, 0xe0, 0xf0, 0xb0, 0x80, 0xe0, 0xe0, 0xf8, 0xf0, 0xe0, 0x70, 0xb0, 0x80, 0xe0, 0xe0,  
            0x03, 0x3f, 0x7f, 0x19, 0x09, 0x09, 0x28, 0x5c, 0x00, 0x30, 0x70, 0x7f, 0xff, 0xff, 0xf7, 0xf3,  
            0xf8, 0xe0, 0xe0, 0xfc, 0x26, 0x30, 0x80, 0x10, 0x00, 0x18, 0x10, 0x00, 0xf8, 0xf8, 0xfe, 0xff,  
            0x3e, 0x1e, 0x3f, 0x38, 0x30, 0x30, 0x00, 0x3a, 0xe7, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07,  
            0x78, 0x1e, 0x80, 0xfe, 0x7e, 0x7e, 0x7f, 0x7f, 0xff, 0xfe, 0xfc, 0xc6, 0x8e, 0xee, 0xff, 0xff,  
            0x3c, 0x3f, 0x1f, 0x0f, 0x07, 0x3f, 0x21, 0x20, 0x03, 0x00, 0x00, 0x0e, 0x07, 0x3f, 0x3f, 0x3f,  
            0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0x70, 0xff, 0x7f, 0x3f, 0x0e, 0xc0, 0xc0, 0xe0, 0xe0,  
            0x0f, 0x9f, 0xcf, 0xff, 0x7f, 0x3f, 0x1e, 0x0e, 0x00, 0x80, 0xc8, 0xfe, 0x7f, 0x3f, 0x1e, 0x0e,  
            0x20, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x03, 0x0f, 0x1f, 0x1f, 0x1c, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f,  
            0x00, 0x04, 0xe6, 0xe0, 0xff, 0xff, 0x8f, 0x83, 0x0e, 0x1f, 0x1f, 0x1f, 0x1f, 0x03, 0xff, 0xff,  
            0x26, 0x26, 0x60, 0x78, 0x18, 0x0f, 0x7f, 0xff, 0x3f, 0x3f, 0x7f, 0x7f, 0x1f, 0x00, 0x7e, 0xff,  
            0x01, 0x21, 0xfe, 0x7a, 0x06, 0xfe, 0xfc, 0xfc, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xde, 0x5c, 0x6c,  
            0xff, 0xcf, 0x87, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xb0, 0x60, 0x00,  
            0xf8, 0xf8, 0xf0, 0xb8, 0xf8, 0xf9, 0xfb, 0xff, 0x28, 0x30, 0x18, 0x40, 0x00, 0x01, 0x03, 0x0f,  
            0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc0, 0x80, 0x10, 0xec, 0xe3, 0xe0, 0xe0, 0xe0, 0xc0, 0x80,  
            0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,  
            0x13, 0x33, 0x30, 0x18, 0x04, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x1f, 0x07, 0x09, 0x13, 0x17,  
            0x00, 0x10, 0x7e, 0x30, 0xe0, 0xf0, 0xf0, 0xe0, 0xff, 0xff, 0xfe, 0xff, 0xfe, 0xfc, 0xf8, 0xe0,  
            0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x17, 0x17, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xf0, 0xf0, 0xf8, 0xf8, 0xb8, 0xf8, 0xf8, 0xf8, 0xd0, 0x90, 0x18, 0x08, 0x40, 0x00, 0x00, 0x00,  
            0x3f, 0xff, 0xff, 0xff, 0xf6, 0xc6, 0x84, 0x00, 0x30, 0xf0, 0xf0, 0xf1, 0xf6, 0xc6, 0x84, 0x00,  
            0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x1f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3e, 0x7c, 0x78, 0xf0, 0xe0,  
            0xf0, 0xf0, 0xf8, 0xf8, 0xb8, 0xf8, 0xf8, 0xf0, 0xb0, 0x90, 0x18, 0x08, 0x40, 0x00, 0x00, 0x00,  
            0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0xc0, 0xe0, 0xfc, 0xfe, 0xff, 0x7f, 0x03, 0x00,  
            0x1f, 0x1f, 0x1f, 0x3f, 0x3e, 0x3c, 0x38, 0x18, 0x00, 0x00, 0x10, 0x38, 0x3e, 0x3c, 0x38, 0x18,  
            0x00, 0x03, 0x07, 0x07, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x03,  
            0x00, 0xe0, 0xfc, 0x20, 0x20, 0x10, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfc, 0xfe, 0xfc, 0xf8,  
            0x07, 0x07, 0x07, 0x1f, 0x1f, 0x3e, 0x21, 0x01, 0x07, 0x0f, 0x1b, 0x18, 0x10, 0x30, 0x21, 0x01,  
            0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xe0, 0xc0, 0xe0, 0xa8, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0xc0, 0xe0,  
            0x07, 0x0f, 0x0e, 0x14, 0x16, 0x18, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x1f, 0x07, 0x3c,  
            0xc0, 0xf8, 0x40, 0x40, 0x20, 0x78, 0x00, 0xc0, 0x00, 0x00, 0xe0, 0xf8, 0xfc, 0xf8, 0xf0, 0xc0,  
            0x3f, 0x0e, 0x0f, 0x1f, 0x3f, 0x7c, 0x70, 0x38, 0xfc, 0xed, 0xc0, 0x00, 0x00, 0x60, 0x70, 0x38,  
            0xf0, 0xf8, 0xe4, 0xfc, 0xfc, 0x7c, 0x00, 0x00, 0x7e, 0x1e, 0x04, 0x0c, 0x0c, 0x0c, 0x00, 0x00,  
            0x07, 0x0f, 0x0e, 0x14, 0x16, 0x18, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x1f, 0x07, 0x0d,  
            0x1f, 0x1f, 0x1f, 0x1c, 0x0c, 0x07, 0x07, 0x07, 0x1e, 0x1c, 0x1e, 0x0f, 0x07, 0x00, 0x07, 0x07,  
            0xe0, 0x60, 0xf0, 0x70, 0xe0, 0xe0, 0xf0, 0x80, 0x60, 0x90, 0x00, 0x80, 0x00, 0xe0, 0xf0, 0x80,  
            0x07, 0x1f, 0x3f, 0x12, 0x13, 0x08, 0x1f, 0x31, 0x00, 0x10, 0x3f, 0x7f, 0x7f, 0x3f, 0x03, 0x0f,  
            0xc0, 0xf0, 0x40, 0x00, 0x30, 0x18, 0xc0, 0xf8, 0x00, 0x00, 0xe0, 0xf8, 0xfc, 0xf8, 0xb0, 0x38,  
            0x31, 0x39, 0x1f, 0x1f, 0x0f, 0x5f, 0x7e, 0x3c, 0x1f, 0x07, 0x00, 0x0e, 0x0f, 0x53, 0x7c, 0x3c,  
            0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0xf8, 0xf8, 0xf0, 0x00, 0x00, 0x80, 0x00, 0x00,  
            0x00, 0xe0, 0xfc, 0x27, 0x27, 0x11, 0x3e, 0x04, 0x07, 0x07, 0x03, 0xf7, 0xff, 0xff, 0xfe, 0xfc,  
            0x3f, 0x7f, 0x3f, 0x0f, 0x1f, 0x3f, 0x7f, 0x4f, 0x3e, 0x7f, 0xff, 0xe2, 0x50, 0x38, 0x70, 0x40,  
            0xf8, 0xf9, 0xf9, 0xb7, 0xff, 0xff, 0xe0, 0x00, 0xe8, 0x71, 0x01, 0x4b, 0x03, 0x03, 0x00, 0x00,  
            0x07, 0x07, 0x0f, 0x3f, 0x3f, 0x3f, 0x26, 0x04, 0x05, 0x03, 0x01, 0x30, 0x30, 0x30, 0x26, 0x04,  
            0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0xfe, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x0f, 0x1c, 0x18, 0x05, 0x03, 0x01, 0x10, 0x30, 0x0c, 0x1c, 0x18,  
            0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0x78, 0x18, 0x08, 0x00, 0x00,  
            0x07, 0x0f, 0x1f, 0x0f, 0x3f, 0x0f, 0x1c, 0x18, 0x07, 0x0f, 0x3e, 0x7c, 0x30, 0x0c, 0x1c, 0x18,  
            0xe0, 0xe0, 0xe0, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x60, 0x60, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00,  
            0x7f, 0xff, 0xff, 0xfb, 0x0f, 0x0f, 0x0f, 0x1f, 0x73, 0xf3, 0xf0, 0xf4, 0xf0, 0xf0, 0x70, 0x60,  
            0x3f, 0x7e, 0x7c, 0x7c, 0x3c, 0x3c, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0xfc, 0xfc,  
            0x60, 0x70, 0x18, 0x08, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0x1f, 0x07, 0x0b, 0x1b, 0x3b, 0x7b,  
            0xfc, 0x7c, 0x00, 0x20, 0xf0, 0xf8, 0xfc, 0xfe, 0xfc, 0xfc, 0xf8, 0xe0, 0xd0, 0xd8, 0xdc, 0xde,  
            0x0b, 0x0f, 0x1f, 0x1e, 0x3c, 0x3c, 0x3c, 0x7c, 0xc4, 0xe0, 0xe0, 0x40, 0x00, 0x3c, 0x3c, 0x7c,  
            0x1f, 0x3f, 0x0d, 0x07, 0x0f, 0x0e, 0x1c, 0x3c, 0x1d, 0x3c, 0x3a, 0x38, 0x30, 0x00, 0x1c, 0x3c,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x55, 0x55, 0x55, 0x55, 0x55, 0x77, 0x22,  
            0x00, 0x07, 0x1f, 0xff, 0x07, 0x1f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x76, 0x00, 0x00, 0xcf, 0x07, 0x7f, 0x00, 0x00, 0x00,  
            0x20, 0xf8, 0xff, 0xc3, 0xfd, 0xfe, 0xf0, 0x40, 0x00, 0x00, 0x3c, 0xfc, 0xfe, 0xe0, 0x00, 0x00,  
            0x40, 0xe0, 0x40, 0x40, 0x41, 0x41, 0x4f, 0x47, 0x40, 0xe0, 0x40, 0x3f, 0x3e, 0x3e, 0x30, 0x38,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0x18, 0x38,  
            0x43, 0x46, 0x44, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3c, 0x39, 0x3b, 0x3f, 0x00, 0x00, 0x00, 0x00,  
            0x80, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x38, 0xb8, 0xf8, 0x00, 0x00, 0x00, 0x00,  
            0x31, 0x30, 0x38, 0x7c, 0x7f, 0xff, 0xff, 0xfb, 0x3f, 0x3f, 0x0f, 0x77, 0x77, 0xf7, 0xf7, 0xf7,  
            0x10, 0x7e, 0x3e, 0x00, 0x1e, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfa, 0xfa, 0xf3, 0xe7,  
            0xff, 0xff, 0xe3, 0xc3, 0x87, 0x48, 0x3c, 0xfc, 0xf0, 0xf8, 0xfc, 0x7c, 0x78, 0x38, 0x3c, 0xfc,  
            0x00, 0xff, 0xc3, 0x83, 0x83, 0xff, 0xff, 0xff, 0xff, 0x00, 0xc3, 0x81, 0x81, 0xc3, 0xff, 0x00,  
            0x1f, 0x1f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xf0, 0xfb, 0xff, 0xff, 0xfe, 0x3e, 0x0c, 0x04, 0x00, 0x0b, 0x1f, 0x1f, 0x1e, 0x3e, 0x0c, 0x04,  
            0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xfb, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00,  
            0x00, 0x18, 0x3c, 0x7e, 0x6e, 0xdf, 0xdf, 0xdf, 0x00, 0x18, 0x3c, 0x7e, 0x76, 0xfb, 0xfb, 0xfb,  
            0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x1c, 0x00, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20,  
            0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  
            0x00, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x10, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38,  
            0x3c, 0x7e, 0x77, 0xfb, 0x9f, 0x5f, 0x8e, 0x20, 0x00, 0x18, 0x3c, 0x0e, 0x0e, 0x04, 0x00, 0x00,  
            0x5c, 0x2e, 0x8f, 0x3f, 0x7b, 0x77, 0x7e, 0x3c, 0x00, 0x00, 0x04, 0x06, 0x1e, 0x3c, 0x18, 0x00,  
            0x13, 0x4f, 0x3f, 0xbf, 0x3f, 0x7a, 0xf8, 0xf8, 0x00, 0x00, 0x01, 0x0a, 0x17, 0x0f, 0x2f, 0x1f,  
            0x00, 0x08, 0x05, 0x0f, 0x2f, 0x1d, 0x1c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x07, 0x0f, 0x07,  
            0x00, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x04, 0x00, 0x60, 0xf0, 0xf8, 0x7c, 0x3e, 0x7e, 0x7f,  
            0x02, 0x02, 0x02, 0x05, 0x71, 0x7f, 0x7f, 0x7f, 0x3f, 0x5f, 0x7f, 0x3e, 0x0e, 0x0a, 0x51, 0x20,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1f,  
            0x02, 0x02, 0x00, 0x01, 0x13, 0x3f, 0x7f, 0x7f, 0x3f, 0x7f, 0x7f, 0xfe, 0xec, 0xca, 0x51, 0x20,  
            0x00, 0x40, 0x60, 0x70, 0x73, 0x27, 0x0f, 0x1f, 0x00, 0x40, 0x63, 0x77, 0x7c, 0x38, 0xf8, 0xe4,  
            0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x18, 0xf8, 0xe4,  
            0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x44, 0x28, 0x10, 0x08, 0x04, 0x03, 0x04,  
            0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x77, 0x77, 0xf5, 0x03, 0x07, 0x0f, 0x1f, 0x27, 0x7b, 0x78, 0xfb,  
            0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xee, 0xee, 0xaf, 0xc0, 0xe0, 0xf0, 0xf8, 0xe4, 0xde, 0x1e, 0xdf,  
            0xf1, 0xff, 0x78, 0x00, 0x00, 0x18, 0x1c, 0x0e, 0xff, 0xff, 0x7f, 0x0f, 0x0f, 0x07, 0x03, 0x00,  
            0x8f, 0xff, 0x1e, 0x00, 0x0c, 0x3e, 0x7e, 0x7c, 0xff, 0xff, 0xfe, 0xf0, 0xf0, 0xc0, 0x80, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00,  
            0x00, 0x02, 0x41, 0x41, 0x61, 0x33, 0x06, 0x3c, 0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c,  
            0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x63, 0x41, 0xc1,  
            0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xc0, 0x80, 0x00, 0x00, 0x8c, 0xfe, 0xfe, 0xf3,  
            0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe3, 0xff, 0x47, 0x0f, 0x0f, 0x0f, 0x07,  
            0xff, 0xff, 0xff, 0x1e, 0x00, 0x20, 0x20, 0x40, 0xf1, 0xf9, 0xff, 0xe2, 0xf0, 0xf0, 0xf0, 0xe0,  
            0x16, 0x1f, 0x3f, 0x7f, 0x3d, 0x1d, 0x3f, 0x1f, 0x16, 0x1f, 0x00, 0x00, 0x05, 0x0d, 0x3f, 0x1f,  
            0x80, 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0x80, 0x80, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xe0,  
            0x3c, 0xfa, 0xb1, 0x72, 0xf2, 0xdb, 0xdf, 0x5f, 0x00, 0x04, 0x4e, 0x8c, 0x0c, 0x7f, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01,  
            0x00, 0x7c, 0xd6, 0x92, 0xba, 0xee, 0xfe, 0x38, 0xff, 0x83, 0x29, 0x6d, 0x45, 0x11, 0x01, 0xc7,  
            0x00, 0x15, 0x3f, 0x62, 0x5f, 0xff, 0x9f, 0x7d, 0x08, 0x08, 0x02, 0x1f, 0x22, 0x02, 0x02, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  
            0x2f, 0x1e, 0x2f, 0x2f, 0x2f, 0x15, 0x0d, 0x0e, 0x10, 0x1e, 0x10, 0x50, 0x10, 0x08, 0x00, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,  
            0x1c, 0x3e, 0x7f, 0xff, 0xff, 0xfe, 0x7c, 0x38, 0x1c, 0x2a, 0x77, 0xee, 0xdd, 0xaa, 0x74, 0x28,  
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0x00, 0xef, 0xef, 0xef, 0x00,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0x00, 0xef, 0xef, 0xef, 0x00,  
            0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x5f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,  
            0x68, 0x4e, 0xe0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xb8, 0x9e, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0x7c,  
            0x3f, 0x5c, 0x39, 0x3b, 0xbb, 0xf9, 0xfc, 0xfe, 0x00, 0x23, 0x57, 0x4f, 0x57, 0x27, 0xc3, 0x21,  
            0xc0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x30, 0x70, 0x70, 0xf0, 0xe0, 0xc0, 0x00,  
            0xfe, 0xfc, 0x61, 0x0f, 0xff, 0xfe, 0xf0, 0xe0, 0x13, 0x0f, 0x1e, 0xf0, 0xfc, 0xf8, 0xf0, 0xe0,  
            0x6e, 0x40, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xbe, 0x90, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00,  
            0x01, 0x01, 0x03, 0x03, 0x07, 0x7f, 0x7f, 0x3f, 0x01, 0x01, 0x03, 0x03, 0x07, 0x7f, 0x7d, 0x3d,  
            0x06, 0x07, 0x3f, 0x3c, 0x19, 0x7b, 0x7f, 0x3f, 0x06, 0x04, 0x30, 0x23, 0x06, 0x64, 0x60, 0x00,  
            0x3f, 0x7f, 0x7f, 0x1f, 0x3f, 0x3f, 0x07, 0x06, 0x00, 0x60, 0x60, 0x00, 0x20, 0x30, 0x04, 0x06,  
            0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xf8, 0xf8, 0xf8, 0xa0, 0xe1, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x40, 0x01, 0x03, 0x03, 0x03,  
            0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xe0, 0xf8, 0xf8, 0xf8, 0xff, 0xfe, 0xf0, 0xc0, 0xe0, 0xfe, 0xff, 0x7f, 0x03, 0x02, 0x00, 0x00,  
            0x01, 0x0f, 0x0f, 0x1f, 0x39, 0x33, 0x37, 0x7f, 0x01, 0x0d, 0x08, 0x00, 0x36, 0x2c, 0x08, 0x60,  
            0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x01, 0x60, 0x00, 0x20, 0x30, 0x00, 0x08, 0x0d, 0x01,  
            0x00, 0x00, 0x03, 0x03, 0x47, 0x67, 0x77, 0x77, 0x01, 0x01, 0x03, 0x43, 0x67, 0x77, 0x7b, 0x78,  
            0x00, 0x00, 0x00, 0x00, 0x88, 0x98, 0xf8, 0xf0, 0x00, 0x00, 0x80, 0x84, 0xcc, 0xdc, 0xbc, 0x3c,  
            0x7e, 0x7f, 0xff, 0x1f, 0x07, 0x30, 0x1c, 0x0c, 0x33, 0x07, 0x07, 0xe3, 0x38, 0x3f, 0x1c, 0x0c,  
            0x7e, 0x38, 0xf6, 0xed, 0xdf, 0x38, 0x70, 0x60, 0x98, 0xc7, 0xc8, 0x92, 0x30, 0xf8, 0x70, 0x60,  
            0x00, 0x00, 0x00, 0x03, 0x03, 0x47, 0x67, 0x77, 0x00, 0x01, 0x01, 0x03, 0x43, 0x67, 0x77, 0x7b,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x98, 0xf8, 0x00, 0x00, 0x00, 0x80, 0x84, 0xcc, 0xdc, 0xbc,  
            0x77, 0x7e, 0x7f, 0xff, 0x1f, 0x07, 0x70, 0xf0, 0x78, 0x33, 0x07, 0x07, 0xe3, 0x38, 0x7f, 0xf0,  
            0xf0, 0x7e, 0x38, 0xf6, 0xed, 0xdf, 0x38, 0x3c, 0x3c, 0x98, 0xc7, 0xc8, 0x92, 0x30, 0xf8, 0x3c,  
            0x03, 0x07, 0x0a, 0x1a, 0x1c, 0x1e, 0x0b, 0x08, 0x00, 0x10, 0x7f, 0x7f, 0x7f, 0x1f, 0x0f, 0x0f,  
            0x1c, 0x3f, 0x3f, 0x3d, 0x3f, 0x1f, 0x00, 0x00, 0x03, 0x33, 0x39, 0x3a, 0x38, 0x18, 0x00, 0x00,  
            0x00, 0x00, 0x04, 0x4c, 0x4e, 0x4e, 0x46, 0x6f, 0x10, 0x38, 0x3c, 0x74, 0x76, 0x76, 0x7e, 0x7d,  
            0x00, 0x1f, 0x3f, 0x3f, 0x4f, 0x5f, 0x7f, 0x7f, 0x00, 0x00, 0x11, 0x0a, 0x34, 0x2a, 0x51, 0x20,  
            0x7f, 0x67, 0xa3, 0xb0, 0xd8, 0xde, 0xdc, 0xc8, 0x7f, 0x67, 0x63, 0x70, 0x38, 0x3e, 0x7c, 0xb8,  
            0x7f, 0x7f, 0x7f, 0x1f, 0x47, 0x70, 0x70, 0x39, 0x51, 0x0a, 0x04, 0xea, 0x79, 0x7f, 0x70, 0x39,  
            0xe8, 0xe8, 0xe0, 0xc0, 0x10, 0x70, 0xe0, 0xc0, 0x58, 0x38, 0x10, 0x30, 0xf0, 0xf0, 0xe0, 0xc0,  
            0x00, 0x00, 0x00, 0x20, 0x66, 0x66, 0x66, 0x62, 0x00, 0x08, 0x1c, 0x3c, 0x7a, 0x7a, 0x7a, 0x7e,  
            0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x4f, 0x5f, 0x7f, 0x00, 0x00, 0x00, 0x11, 0x0a, 0x34, 0x2a, 0x51,  
            0x77, 0x7f, 0x3f, 0xb7, 0xb3, 0xdb, 0xda, 0xd8, 0x7f, 0x7d, 0x3f, 0x37, 0x33, 0x3b, 0x3a, 0x78,  
            0x7f, 0x7f, 0x7f, 0x7f, 0x1f, 0x07, 0x70, 0xf0, 0x20, 0x51, 0x0a, 0x04, 0xea, 0x39, 0x7f, 0xf0,  
            0xcc, 0xe8, 0xe8, 0xe0, 0xc0, 0x18, 0x7c, 0x3e, 0xbc, 0x58, 0x38, 0x10, 0x30, 0xf8, 0xfc, 0x3e,  
            0x03, 0x0f, 0x1f, 0x3f, 0x3b, 0x3f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x0c, 0x00, 0x00,  
            0x80, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x18,  
            0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x3b, 0x18,  
            0xfe, 0xfb, 0xff, 0xff, 0xf6, 0xe0, 0xc0, 0x00, 0x10, 0x14, 0x10, 0x10, 0x38, 0x78, 0xf8, 0x30,  
            0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x3b, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x0c, 0x00,  
            0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,  
            0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7e, 0xf3,  
            0xfe, 0xfe, 0xfb, 0xff, 0xff, 0xf6, 0xe0, 0xc0, 0x18, 0x10, 0x14, 0x10, 0x10, 0x38, 0x7c, 0xde,  
            0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x08, 0x00, 0x0d, 0x1e, 0x1e, 0x1e, 0x1f, 0x0f, 0x07,  
            0x78, 0xf0, 0xf8, 0xe4, 0xc0, 0xca, 0xca, 0xc0, 0x78, 0xf0, 0x00, 0x1a, 0x3f, 0x35, 0x35, 0x3f,  
            0x0f, 0x1f, 0x9f, 0xff, 0xff, 0x7f, 0x74, 0x20, 0x00, 0x00, 0x80, 0xe0, 0xe0, 0x70, 0x73, 0x21,  
            0xe4, 0xff, 0xfe, 0xfc, 0x9c, 0x1e, 0x00, 0x00, 0x1a, 0x07, 0x0c, 0x18, 0x78, 0xfe, 0xfc, 0xf0,  
            0x00, 0x01, 0x03, 0x03, 0x07, 0x03, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x38, 0x7c, 0x7e, 0x3f,  
            0x00, 0x5f, 0x7f, 0x7f, 0x3f, 0x3f, 0x14, 0x00, 0x3f, 0x40, 0x60, 0x60, 0x20, 0x30, 0x13, 0x01,  
            0xc0, 0xe0, 0xf0, 0x30, 0x38, 0x3c, 0x3c, 0xfc, 0xc0, 0xe0, 0x30, 0xd0, 0xd0, 0xd0, 0xd0, 0x00,  
            0x07, 0x0f, 0x1f, 0x22, 0x20, 0x25, 0x25, 0x1f, 0x07, 0x0f, 0x02, 0x1d, 0x1f, 0x1a, 0x1a, 0x02,  
            0xfe, 0xfe, 0x7e, 0x3a, 0x02, 0x01, 0x41, 0x41, 0x38, 0x7c, 0xfc, 0xfc, 0xfc, 0xfe, 0xbe, 0xbe,  
            0x1f, 0x3f, 0x7e, 0x5c, 0x40, 0x80, 0x82, 0x82, 0x1c, 0x3e, 0x3f, 0x3f, 0x3f, 0x7f, 0x7d, 0x7d,  
            0x82, 0x80, 0xa0, 0x44, 0x43, 0x40, 0x21, 0x1e, 0x7d, 0x7f, 0x5f, 0x3b, 0x3c, 0x3f, 0x1e, 0x00,  
            0x1c, 0x3f, 0x3e, 0x3c, 0x40, 0x80, 0x82, 0x82, 0x1c, 0x3e, 0x3f, 0x1f, 0x3f, 0x7f, 0x7d, 0x7d,  
            0x00, 0x00, 0x80, 0x80, 0x92, 0x9d, 0xc7, 0xef, 0x00, 0x00, 0x00, 0x60, 0x62, 0x65, 0x3f, 0x1f,  
            0x00, 0x23, 0x33, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x70, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x02, 0x07,  
            0xfe, 0xf8, 0xa0, 0x00, 0x00, 0x00, 0x80, 0x80, 0xcf, 0x7a, 0x5a, 0x10, 0x00, 0x00, 0xc0, 0x80,  
            0x7e, 0x7f, 0x7d, 0x3f, 0x1e, 0x8f, 0x8f, 0x19, 0x85, 0x84, 0x86, 0xc6, 0xe7, 0x73, 0x73, 0xe1,  
            0xe0, 0x0e, 0x73, 0xf3, 0xf9, 0xf9, 0xf8, 0x70, 0x80, 0x4e, 0x77, 0xf3, 0xfb, 0xf9, 0xfa, 0x78,  
            0x0e, 0x66, 0xe2, 0xf6, 0xff, 0xff, 0x1f, 0x98, 0x11, 0x39, 0x7d, 0x39, 0x00, 0x00, 0xe0, 0xe7,  
            0x00, 0x00, 0x00, 0x04, 0x0f, 0x0f, 0x1f, 0x07, 0x00, 0x00, 0x07, 0x07, 0x16, 0x10, 0x00, 0x38,  
            0xf3, 0xe7, 0xee, 0xec, 0xcd, 0xcf, 0xcf, 0xdf, 0xcf, 0x1f, 0x17, 0x10, 0x33, 0x30, 0x30, 0x20,  
            0x27, 0x3f, 0x3f, 0x78, 0x3c, 0x1f, 0x1f, 0x73, 0x38, 0x30, 0x40, 0xc7, 0x07, 0x66, 0xe0, 0x6c,  
            0x9f, 0x3e, 0x7c, 0xfc, 0xf8, 0xf8, 0xc0, 0x40, 0x60, 0xc0, 0x80, 0x04, 0x9e, 0xff, 0xf0, 0xf8,  
            0x7f, 0x7e, 0x78, 0x01, 0x07, 0x1f, 0x3c, 0x7c, 0x24, 0x01, 0x07, 0xfe, 0xff, 0x7f, 0x3f, 0x7f,  
            0xfc, 0xf8, 0xa0, 0xfe, 0xfc, 0xf0, 0x80, 0x00, 0xcf, 0x7a, 0x0a, 0xfe, 0xfc, 0x00, 0x00, 0x00,  
            0x7e, 0x7f, 0x7f, 0x3f, 0x1f, 0x8f, 0x8f, 0x18, 0x85, 0x86, 0x83, 0xc3, 0xe1, 0x70, 0x70, 0xe0,  
            0x9f, 0x3e, 0x7c, 0xf8, 0xf8, 0x3c, 0x18, 0xf8, 0x60, 0xc0, 0x80, 0x00, 0x98, 0xfc, 0xfe, 0xff,  
            0x7f, 0x7f, 0x78, 0x01, 0x07, 0x13, 0xf1, 0x03, 0x24, 0x00, 0x07, 0xfe, 0xff, 0x7f, 0xff, 0x03,  
            0x00, 0x00, 0x1c, 0x1d, 0x1b, 0xc3, 0xe3, 0xe1, 0x03, 0x0f, 0x23, 0x62, 0x64, 0x3c, 0x1c, 0x1e,  
            0xe0, 0xcd, 0x1d, 0x4f, 0xee, 0xff, 0x3f, 0x3f, 0x1f, 0x3d, 0x6d, 0x4f, 0xee, 0xf3, 0x20, 0x03,  
            0x3f, 0x3f, 0x00, 0x00, 0x70, 0xb8, 0xfc, 0xfc, 0x07, 0x07, 0x1f, 0x3f, 0x0f, 0x47, 0x03, 0x00,  
            0x07, 0x0f, 0x1f, 0x3f, 0x3e, 0x7c, 0x78, 0x78, 0x00, 0x00, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1f,  
            0x3f, 0x5c, 0x39, 0x3b, 0xbf, 0xff, 0xfe, 0xfe, 0x00, 0x23, 0x57, 0x4f, 0x57, 0x2f, 0xdf, 0x21,  
            0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,  
            0xfe, 0xfc, 0x61, 0x0f, 0x7f, 0x3f, 0x1f, 0x1e, 0x23, 0x0f, 0x1e, 0xf0, 0x1c, 0x3f, 0x1f, 0x1e,  
            0xf0, 0x78, 0xe4, 0xc8, 0xcc, 0xbe, 0xbe, 0x3e, 0x00, 0x80, 0x18, 0x30, 0x34, 0xfe, 0xfe, 0xfe,  
            0x00, 0x01, 0x00, 0x07, 0x07, 0x07, 0x07, 0x1f, 0x00, 0x00, 0x01, 0x04, 0x06, 0x06, 0x07, 0x07,  
            0x00, 0x00, 0x0f, 0x3f, 0x3f, 0x0f, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xf8, 0xf8, 0x7f, 0x3f, 0x0f,  
            0x78, 0x7c, 0x7e, 0x7f, 0x3f, 0x3f, 0x1b, 0x09, 0x1f, 0x1f, 0x1f, 0x0b, 0x01, 0x01, 0x00, 0x00,  
            0x0c, 0x00, 0x00, 0x00, 0x07, 0x7f, 0x7c, 0x00, 0x03, 0x1f, 0x3f, 0x3f, 0x78, 0x00, 0x03, 0xff,  
            0x01, 0xe1, 0x71, 0x79, 0x3d, 0x3d, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x3f, 0x3f, 0x1f, 0x1b, 0x36, 0x30, 0x7f, 0x3f, 0x23, 0x27, 0x1f, 0x07, 0x0f, 0x1f, 0x7f, 0x3f,  
            0xf8, 0xf8, 0xf8, 0xb8, 0x18, 0xd8, 0xd8, 0xb8, 0xe0, 0x80, 0x80, 0x40, 0xe0, 0xe0, 0xe0, 0xc0,  
            0x01, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0x1f,  
            0x00, 0x0f, 0x13, 0x0d, 0x0d, 0x13, 0x0c, 0x20, 0x1f, 0x10, 0x0c, 0x12, 0x12, 0x2c, 0x3f, 0x3f,  
            0x00, 0x24, 0x00, 0x24, 0x00, 0x04, 0x00, 0x00, 0x37, 0x36, 0x36, 0x36, 0x16, 0x16, 0x12, 0x02,  
            0x0f, 0x41, 0x00, 0x88, 0x00, 0x44, 0x00, 0x00, 0x10, 0x7e, 0xff, 0xff, 0xf6, 0x76, 0x3a, 0x1a,  
            0x38, 0x7c, 0xfe, 0xfe, 0x3b, 0x03, 0x03, 0x03, 0x00, 0x00, 0x38, 0x04, 0x00, 0x00, 0x00, 0x00,  
            0x03, 0x33, 0x7b, 0x7f, 0xff, 0xfb, 0x03, 0x03, 0x00, 0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00,  
            0xdc, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xfc, 0xa0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,  
            0x3f, 0x5f, 0x3f, 0x3f, 0xbb, 0xf8, 0xfe, 0xfe, 0x07, 0x27, 0x57, 0x4f, 0x57, 0x27, 0xc1, 0x21,  
            0x1f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1e, 0x38, 0x30, 0x1d, 0x0f, 0x0f, 0x1f, 0x1f, 0x1e, 0x38, 0x30,  
            0x00, 0x20, 0x60, 0x60, 0x70, 0xf0, 0xf8, 0xf8, 0x00, 0x00, 0x38, 0x10, 0x4c, 0x18, 0x86, 0x24,  
            0xf8, 0xfc, 0xfc, 0x7e, 0x7e, 0x3e, 0x1f, 0x07, 0x00, 0x42, 0x0a, 0x40, 0x10, 0x02, 0x08, 0x02,  
            0x00, 0xc0, 0x70, 0xb8, 0xf4, 0xf2, 0xf5, 0x7b, 0x00, 0x00, 0x80, 0x40, 0x08, 0x0c, 0x0a, 0x84,  
            0x00, 0xdf, 0x10, 0xff, 0xdf, 0xff, 0xff, 0xf9, 0x00, 0x00, 0xcf, 0x20, 0x20, 0x20, 0x26, 0x2e,  
            0x1f, 0x1f, 0x3e, 0xfc, 0xf8, 0xf0, 0xc0, 0x00, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xdf, 0xdf, 0x00, 0x2f, 0x23, 0x21, 0x20, 0x20, 0x00, 0x00, 0x00,  
            0xc1, 0xf1, 0x79, 0x7d, 0x3d, 0x3f, 0x1f, 0x03, 0xc1, 0xb1, 0x59, 0x6d, 0x35, 0x3b, 0x1f, 0x03,  
            0x02, 0x06, 0x0e, 0x0e, 0x1e, 0x1e, 0x3e, 0x3e, 0x00, 0x02, 0x00, 0x08, 0x02, 0x00, 0x28, 0x00,  
            0x3e, 0x3e, 0x3e, 0x3e, 0x1e, 0x1e, 0x0e, 0x02, 0x04, 0x10, 0x02, 0x10, 0x04, 0x00, 0x0a, 0x00,  
            0xc1, 0xf1, 0x79, 0x7d, 0x3d, 0x3f, 0x1f, 0x03, 0xc1, 0xb1, 0x59, 0x6d, 0x35, 0x3b, 0x1f, 0x03,  
            0x7c, 0x00, 0x00, 0xff, 0xc3, 0x7f, 0x1f, 0x03, 0x00, 0x0f, 0x1f, 0xff, 0xfc, 0x63, 0x1f, 0x03,  
            0xff, 0xff, 0x7c, 0x00, 0x00, 0x7c, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xfe, 0x00, 0x00,  
            0xff, 0xff, 0x00, 0x04, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x06, 0x06, 0x0c, 0x18, 0x70, 0x60,  
            0xff, 0xff, 0x00, 0x04, 0x04, 0x04, 0x08, 0x08, 0x00, 0x00, 0x06, 0x06, 0x04, 0x04, 0x08, 0x08,  
            0x08, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x08, 0x08, 0x10, 0x30, 0x30, 0x30, 0x30, 0x10, 0x08,  
            0x7f, 0x3f, 0x3f, 0x3e, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00,  
            0x03, 0x0f, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x03, 0x0e, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x65, 0x25, 0x25, 0x25, 0x25, 0x77, 0x72,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x95, 0x15, 0x25, 0x45, 0x85, 0xf7, 0xf2,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0xa5, 0xa5, 0xa5, 0xf5, 0xf5, 0x27, 0x22,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x85, 0x85, 0xe5, 0x15, 0x15, 0xf7, 0xe2,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x95, 0x55, 0x65, 0xb5, 0x95, 0x97, 0x62,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x50, 0x50, 0x50, 0x50, 0x50, 0x70, 0x20,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x00, 0x12, 0x12, 0x12, 0x12, 0x10, 0x08, 0x7b, 0x6c, 0xec, 0x6c, 0x6c, 0x6c, 0x6f, 0xf7, 0x00,  
            0x00, 0x4c, 0x49, 0x49, 0x43, 0x4e, 0xc8, 0x98, 0xbc, 0xb2, 0xb2, 0xb2, 0xbc, 0xb0, 0x30, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00,  
            0x7c, 0xfe, 0xe7, 0xe7, 0xe7, 0x7f, 0x3e, 0x00, 0x00, 0x38, 0x21, 0x21, 0x21, 0x03, 0x3e, 0x00,  
            0x18, 0x3c, 0x1c, 0x1c, 0x1c, 0x7e, 0x3f, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x3f, 0x00,  
            0x7c, 0xfe, 0x7f, 0x7f, 0xfc, 0xfe, 0x7f, 0x00, 0x00, 0x38, 0x61, 0x07, 0x1c, 0x00, 0x7f, 0x00,  
            0x7e, 0x3f, 0x3c, 0x1e, 0xc7, 0x7f, 0x3e, 0x00, 0x00, 0x37, 0x00, 0x18, 0x01, 0x03, 0x3e, 0x00,  
            0x1c, 0x3e, 0x7e, 0xee, 0xfe, 0x7f, 0x06, 0x00, 0x00, 0x02, 0x12, 0x22, 0x00, 0x73, 0x06, 0x00,  
            0xfc, 0xfe, 0xfc, 0x7e, 0xc7, 0x7f, 0x3e, 0x00, 0x00, 0x3e, 0x00, 0x78, 0x01, 0x03, 0x3e, 0x00,  
            0x7c, 0xfe, 0xfc, 0xfe, 0xe7, 0x7f, 0x3e, 0x00, 0x00, 0x3e, 0x00, 0x38, 0x21, 0x03, 0x3e, 0x00,  
            0xfe, 0xff, 0x6f, 0x1e, 0x3c, 0x38, 0x18, 0x00, 0x00, 0x39, 0x63, 0x06, 0x0c, 0x08, 0x18, 0x00,  
            0x7c, 0xfe, 0x7f, 0xfe, 0xe7, 0x7f, 0x3e, 0x00, 0x00, 0x38, 0x03, 0x38, 0x21, 0x03, 0x3e, 0x00,  
            0x7c, 0xfe, 0xe7, 0x7f, 0x3f, 0x7f, 0x3e, 0x00, 0x00, 0x38, 0x21, 0x01, 0x39, 0x03, 0x3e, 0x00,  
            0x38, 0x7c, 0xf6, 0xe7, 0xff, 0xff, 0xe7, 0x63, 0x00, 0x10, 0x30, 0x21, 0x01, 0x39, 0x21, 0x63,  
            0xfc, 0xfe, 0xe7, 0xff, 0xfe, 0xe7, 0xff, 0x7e, 0x00, 0x38, 0x21, 0x03, 0x38, 0x21, 0x03, 0x7e,  
            0x3c, 0x7e, 0xf3, 0xe0, 0xe0, 0x66, 0x3f, 0x1e, 0x00, 0x18, 0x33, 0x20, 0x20, 0x00, 0x03, 0x1e,  
            0xf8, 0xfc, 0xe6, 0xe7, 0xe7, 0xef, 0xfe, 0x7c, 0x00, 0x30, 0x20, 0x21, 0x21, 0x23, 0x06, 0x7c,  
            0xfe, 0xff, 0xe0, 0xfc, 0xfe, 0xe0, 0xfe, 0x7f, 0x00, 0x3f, 0x20, 0x00, 0x3e, 0x20, 0x00, 0x7f,  
            0xfe, 0xff, 0xe0, 0xfc, 0xfe, 0xe0, 0xe0, 0x60, 0x00, 0x3f, 0x20, 0x00, 0x3e, 0x20, 0x20, 0x60,  
            0x3e, 0x7f, 0xf0, 0xee, 0xe7, 0x67, 0x3f, 0x1f, 0x00, 0x1f, 0x30, 0x20, 0x21, 0x01, 0x01, 0x1f,  
            0xc6, 0xe7, 0xe7, 0xff, 0xff, 0xe7, 0xe7, 0x63, 0x00, 0x21, 0x21, 0x01, 0x39, 0x21, 0x21, 0x63,  
            0x7e, 0x1f, 0x1c, 0x1c, 0x1c, 0x1c, 0x7e, 0x3f, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x00, 0x3f,  
            0x1e, 0x07, 0x07, 0x07, 0xc7, 0xe7, 0x7f, 0x3e, 0x00, 0x01, 0x01, 0x01, 0x01, 0x21, 0x03, 0x3e,  
            0xc6, 0xef, 0xfe, 0xfc, 0xf8, 0xfc, 0xee, 0x67, 0x00, 0x23, 0x26, 0x0c, 0x00, 0x20, 0x20, 0x67,  
            0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x7e, 0x3f, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x3f,  
            0xc6, 0xef, 0xff, 0xff, 0xff, 0xef, 0xe7, 0x63, 0x00, 0x01, 0x01, 0x01, 0x29, 0x29, 0x21, 0x63,  
            0xc6, 0xe7, 0xf7, 0xff, 0xff, 0xef, 0xe7, 0x63, 0x00, 0x01, 0x01, 0x01, 0x21, 0x21, 0x21, 0x63,  
            0x7c, 0xfe, 0xe7, 0xe7, 0xe7, 0xe7, 0x7f, 0x3e, 0x00, 0x38, 0x21, 0x21, 0x21, 0x21, 0x03, 0x3e,  
            0xfc, 0xfe, 0xe7, 0xe7, 0xff, 0xfe, 0xe0, 0x60, 0x00, 0x38, 0x21, 0x21, 0x03, 0x3e, 0x20, 0x60,  
            0x7c, 0xfe, 0xe7, 0xe7, 0xff, 0xef, 0x7e, 0x3d, 0x00, 0x38, 0x21, 0x21, 0x21, 0x23, 0x04, 0x3d,  
            0xfc, 0xfe, 0xe7, 0xef, 0xff, 0xfc, 0xee, 0x67, 0x00, 0x38, 0x21, 0x21, 0x07, 0x20, 0x20, 0x67,  
            0x78, 0xfc, 0xe6, 0x7c, 0x3e, 0xc7, 0x7f, 0x3e, 0x00, 0x30, 0x26, 0x00, 0x38, 0x01, 0x03, 0x3e,  
            0x7e, 0x1f, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x0c, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0c,  
            0xc6, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x7f, 0x3e, 0x00, 0x21, 0x21, 0x21, 0x21, 0x21, 0x03, 0x3e,  
            0xc6, 0xe7, 0xe7, 0xef, 0x7f, 0x3e, 0x1c, 0x08, 0x00, 0x21, 0x21, 0x01, 0x03, 0x06, 0x0c, 0x08,  
            0xc6, 0xe7, 0xf7, 0xff, 0xff, 0xff, 0xf7, 0x63, 0x00, 0x21, 0x21, 0x01, 0x01, 0x11, 0x31, 0x63,  
            0xc6, 0xef, 0x7f, 0x3e, 0x7c, 0xfe, 0xf7, 0x63, 0x00, 0x01, 0x03, 0x06, 0x00, 0x10, 0x31, 0x63,  
            0x66, 0x77, 0x77, 0x3f, 0x1c, 0x1c, 0x1c, 0x0c, 0x00, 0x11, 0x11, 0x03, 0x04, 0x04, 0x04, 0x0c,  
            0xfe, 0x7f, 0x1f, 0x3e, 0x7c, 0xf8, 0xfe, 0x7f, 0x00, 0x71, 0x03, 0x06, 0x0c, 0x18, 0x00, 0x7f,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x7e, 0x7f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x00, 0x00,  
            0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,  
            0x1c, 0x3e, 0x3e, 0x3e, 0x1e, 0x1c, 0x00, 0x1c, 0x04, 0x02, 0x02, 0x02, 0x06, 0x04, 0x00, 0x04,  
            0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xe3, 0xc1, 0xff, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1c, 0x3e,  
            0x80, 0x80, 0x80, 0xc1, 0xe3, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3e, 0x1c, 0x00, 0x00, 0xff,  
            0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x38, 0x00, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x00,  
            0x03, 0x06, 0x0c, 0x0c, 0x08, 0x08, 0x04, 0x03, 0x03, 0x05, 0x0b, 0x0b, 0x0f, 0x0f, 0x07, 0x03,  
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0xff,  
            0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff,  
            0x04, 0x0e, 0x0e, 0x0e, 0x6e, 0x64, 0x60, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x07, 0x0f, 0x1f, 0x1f, 0x7f, 0xff, 0xff, 0x7f, 0x07, 0x08, 0x10, 0x00, 0x60, 0x80, 0x80, 0x40,  
            0x03, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x79, 0xf7, 0x03, 0x04, 0x18, 0x20, 0x20, 0x20, 0x46, 0x88,  
            0xc0, 0xe0, 0xf0, 0xf4, 0xfe, 0xbf, 0xdf, 0xff, 0xc0, 0x20, 0x10, 0x14, 0x0a, 0x41, 0x21, 0x01,  
            0x90, 0xb8, 0xf8, 0xfa, 0xff, 0xff, 0xff, 0xfe, 0x90, 0xa8, 0x48, 0x0a, 0x05, 0x01, 0x01, 0x02,  
            0x3b, 0x1d, 0x0e, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x24, 0x12, 0x09, 0x08, 0x07, 0x00, 0x00, 0x00,  
            0xff, 0xbf, 0x1c, 0xc0, 0xf3, 0xff, 0x7e, 0x1c, 0x00, 0x40, 0xe3, 0x3f, 0x0c, 0x81, 0x62, 0x1c,  
            0xbf, 0x7f, 0x3d, 0x83, 0xc7, 0xff, 0xff, 0x3c, 0x40, 0x80, 0xc2, 0x7c, 0x38, 0x00, 0xc3, 0x3c,  
            0xfc, 0xfe, 0xff, 0xfe, 0xfe, 0xf8, 0x60, 0x00, 0x04, 0x02, 0x01, 0x00, 0x06, 0x98, 0x60, 0x00,  
            0xc0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0,  
            0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e,  
            0x88, 0x9c, 0x88, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x3e, 0x1c, 0x00, 0x00, 0x00,  
            0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x08, 0x14, 0x24, 0xc4, 0x03, 0x40, 0xa1, 0x26, 0x00, 0x08, 0x18, 0x38, 0xfc, 0xbf, 0x5e, 0xd9,  
            0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  
            0x7f, 0x80, 0x80, 0x98, 0x9c, 0x8c, 0x80, 0x80, 0x00, 0x7f, 0x7f, 0x67, 0x67, 0x7f, 0x7f, 0x7f,  
            0xff, 0x01, 0x01, 0xff, 0x10, 0x10, 0x10, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,  
            0x01, 0x01, 0x01, 0xff, 0x10, 0x10, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xfe, 0x01, 0x01, 0x19, 0x1d, 0x0d, 0x01, 0x01, 0x00, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff,  
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x60, 0x40, 0xc0, 0x80, 0x80, 0x80, 0x80,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x42, 0x3c,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x7c,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x83, 0xff,  
            0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x04, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x42, 0x3c,  
            0x00, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x00, 0x7f, 0x7f, 0x78, 0x73, 0x73, 0x73, 0x7f, 0x7f, 0x80, 0xa0, 0x87, 0x8f, 0x8e, 0x8e, 0x86,  
            0x00, 0xff, 0xff, 0x3f, 0x9f, 0x9f, 0x9f, 0x1f, 0xfe, 0x01, 0x05, 0xc1, 0xe1, 0x71, 0x71, 0xf1,  
            0x7e, 0x7e, 0x7f, 0x7e, 0x7e, 0x7f, 0x7f, 0xff, 0x81, 0x81, 0x80, 0x81, 0x81, 0xa0, 0x80, 0xff,  
            0x7f, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xf1, 0xc1, 0xc1, 0x81, 0xc1, 0xc5, 0x01, 0xff,  
            0x7f, 0x80, 0xa0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xfe, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,  
            0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,  
            0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7c,  
            0x11, 0x39, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x00, 0x00, 0x00,  
            0xef, 0x28, 0x28, 0x28, 0x28, 0x28, 0xef, 0x00, 0x20, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xef, 0x00,  
            0xfe, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x00, 0x02, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0xfe, 0x00,  
            0x80, 0x80, 0x80, 0x98, 0x9c, 0x8c, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x67, 0x67, 0x7f, 0x7f, 0x7f,  
            0xff, 0xff, 0x83, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xff, 0x80, 0xfc, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,  
            0xff, 0xff, 0xf0, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xff, 0x00, 0x0f, 0x09, 0x09, 0x09, 0x09, 0x09,  
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xff, 0xff, 0x01, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0xff, 0x01, 0xff, 0xa9, 0xd1, 0xa9, 0xd1, 0xa9,  
            0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xff, 0x3f, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0xff, 0x3f,  
            0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xff, 0xff, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0xff, 0xfc, 0xd1, 0xa9, 0xd1, 0xa9, 0xd1, 0xa9, 0xff, 0xfc,  
            0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,  
            0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,  
            0xbc, 0x5c, 0xbc, 0x5c, 0xbc, 0x5c, 0xbc, 0x5c, 0x44, 0xa4, 0x44, 0xa4, 0x44, 0xa4, 0x44, 0xa4,  
            0x1f, 0x20, 0x40, 0x40, 0x80, 0x80, 0x80, 0x81, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xfe,  
            0xff, 0x80, 0x80, 0xc0, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0x7f, 0x7f, 0x3f, 0x00, 0x00, 0x01, 0x01,  
            0xff, 0x7f, 0x7f, 0xff, 0xff, 0x07, 0x03, 0x03, 0xff, 0x80, 0x80, 0x00, 0x00, 0xf8, 0xfc, 0xfc,  
            0xff, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x00,  
            0xf8, 0xfc, 0xfe, 0xfe, 0xe3, 0xc1, 0x81, 0x81, 0xf8, 0x04, 0x02, 0x02, 0x1d, 0x3f, 0x7f, 0x7f,  
            0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x1f,  
            0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0xff,  
            0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,  
            0x81, 0xc1, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0x3f, 0x1d, 0x01, 0x01, 0x01, 0x03, 0xfe,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xb5, 0xce, 0x80, 0x80, 0x80, 0x80, 0x80, 0x84, 0xca, 0xb1,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xad, 0x73, 0x01, 0x01, 0x01, 0x01, 0x01, 0x21, 0x53, 0x8d,  
            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x77, 0xff, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x77, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x77, 0x77, 0x77, 0x77, 0x77,  
            0x01, 0x01, 0x01, 0x19, 0x1d, 0x0d, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xfe,  
            0x20, 0x78, 0x7f, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x21, 0x21, 0x41, 0x41, 0x41, 0x41, 0x41,  
            0x04, 0x9a, 0xfa, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  
            0x7e, 0x38, 0x21, 0x00, 0x01, 0x00, 0x01, 0x00, 0x21, 0x21, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  
            0xfa, 0x8a, 0x84, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  
            0x02, 0x04, 0x00, 0x10, 0x00, 0x40, 0x80, 0x00, 0x01, 0x01, 0x06, 0x08, 0x18, 0x20, 0x20, 0xc0,  
            0x0b, 0x0b, 0x3b, 0x0b, 0xfb, 0x0b, 0x0b, 0x0a, 0x04, 0x04, 0xc4, 0xf4, 0xf4, 0x04, 0x04, 0x05,  
            0x90, 0x10, 0x1f, 0x10, 0x1f, 0x10, 0x10, 0x90, 0x70, 0xf0, 0xf0, 0xff, 0xff, 0xf0, 0xf0, 0x70,  
            0x3f, 0x78, 0xe7, 0xcf, 0x58, 0x58, 0x50, 0x90, 0xc0, 0x87, 0x18, 0xb0, 0xe7, 0xe7, 0xef, 0xef,  
            0xb0, 0xfc, 0xe2, 0xc1, 0xc1, 0x83, 0x8f, 0x7e, 0x6f, 0x43, 0x5d, 0x3f, 0x3f, 0x7f, 0x7f, 0xff,  
            0xfe, 0x03, 0x0f, 0x91, 0x70, 0x60, 0x20, 0x31, 0x03, 0xff, 0xf1, 0x6e, 0xcf, 0xdf, 0xff, 0xff,  
            0x3f, 0x3f, 0x1d, 0x39, 0x7b, 0xf3, 0x86, 0xfe, 0xfd, 0xfb, 0xfb, 0xf7, 0xf7, 0x0f, 0x7f, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0x80,  
            0xfe, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0xff, 0xfe, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0x03,  
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,  
            0x3c, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x04, 0x04, 0x23, 0xf3, 0x0b, 0x0b, 0x0b, 0x07, 0xff, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0xff, 0x80, 0x80, 0x80,  
            0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0x03, 0x03, 0x03,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  
            0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0x02, 0xfe, 0xfe, 0x07, 0x07, 0x03, 0x03, 0x03, 0xff, 0x03, 0x03,  
            0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x80, 0x80, 0xaa, 0xd5, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0xaa, 0xd5, 0x80, 0x80, 0xff,  
            0x03, 0x03, 0xab, 0x57, 0xab, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x57, 0xab, 0x57, 0x03, 0x03, 0xfe,  
            0x00, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 0x00, 0xff, 0xaa, 0x55, 0xaa, 0x00, 0x00, 0xff, 0x00,  
            0x04, 0x54, 0xac, 0x5c, 0xfc, 0xfc, 0xfc, 0x3c, 0xff, 0xaf, 0x57, 0xab, 0x0b, 0x0b, 0xf3, 0x23,  
            0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x7e, 0x7c, 0x7c, 0x78, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x1f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xfe, 0xfc, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x07, 0x1f, 0x3f, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xe1, 0xf9, 0xfd, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,  
            0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,  
            0x92, 0x92, 0x92, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x48, 0x6c, 0x00, 0x00, 0x00, 0xfe, 0x00,  
            0x0a, 0x0a, 0x3a, 0x0a, 0xfb, 0x0b, 0x0b, 0x0b, 0x05, 0x05, 0xc5, 0xf5, 0xf4, 0x04, 0x04, 0x04,  
            0x90, 0x90, 0x9f, 0x90, 0x9f, 0x90, 0x90, 0x90, 0x70, 0x70, 0x70, 0x7f, 0x7f, 0x70, 0x70, 0x70,  
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x08, 0x88, 0x91, 0xd1, 0x53, 0x53, 0x73, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbe, 0xce,  
            0x00, 0x00, 0x07, 0x0f, 0x0c, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04,  
            0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0x00, 0x00, 0x60, 0x30, 0x30, 0x98, 0x98, 0x98,  
            0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x0f, 0x0f, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x00, 0x00,  
            0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0x98, 0x98, 0x98, 0x98, 0x98, 0x30, 0x30, 0x60,  
            0xf1, 0x11, 0x11, 0x1f, 0x10, 0x10, 0x10, 0xff, 0x0f, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xe0,  
            0x1f, 0x10, 0x10, 0xf0, 0x10, 0x10, 0x10, 0xff, 0xe0, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0x0f,  
            0x7f, 0xbf, 0xdf, 0xef, 0xf0, 0xf0, 0xf0, 0xf0, 0x80, 0x40, 0x20, 0x10, 0x0f, 0x0f, 0x0f, 0x0f,  
            0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x01, 0x03, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xff,  
            0x0f, 0x0f, 0x0f, 0x0f, 0xf7, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18,  
            0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x1f, 0x20, 0x40, 0x40, 0x40, 0x80, 0x82, 0x82,  
            0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x1e, 0x82, 0x80, 0xa0, 0x44, 0x43, 0x40, 0x21, 0x1e,  
            0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0x04, 0x02, 0x02, 0x02, 0x01, 0x41, 0x41,  
            0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0x78, 0x41, 0x01, 0x05, 0x22, 0xc2, 0x02, 0x84, 0x78,  
            0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,  
            0xde, 0x61, 0x61, 0x61, 0x71, 0x5e, 0x7f, 0x61, 0x61, 0xdf, 0xdf, 0xdf, 0xdf, 0xff, 0xc1, 0xdf,  
            0x80, 0x80, 0xc0, 0xf0, 0xbf, 0x8f, 0x81, 0x7e, 0x7f, 0x7f, 0xff, 0x3f, 0x4f, 0x71, 0x7f, 0xff,  
            0x61, 0x61, 0xc1, 0xc1, 0x81, 0x81, 0x83, 0xfe, 0xdf, 0xdf, 0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x7f,  
            0x00, 0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x00, 0x00, 0x03, 0x0c, 0x10, 0x20, 0x40, 0x40,  
            0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0x00, 0x00, 0xc0, 0x30, 0x08, 0x04, 0x02, 0x02,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  
            0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x40, 0x40, 0x40, 0x20, 0x30, 0x1c, 0x0f, 0x07,  
            0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0x02, 0x02, 0x02, 0x04, 0x0c, 0x38, 0xf0, 0xf0,  
            0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x05, 0x0a,  
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xf0, 0x10, 0x50, 0x50, 0x50, 0x50, 0x30, 0xa0, 0x50,  
            0x81, 0xc1, 0xa3, 0xa3, 0x9d, 0x81, 0x81, 0x81, 0x00, 0x41, 0x22, 0x22, 0x1c, 0x00, 0x00, 0x00,  
            0xe3, 0xf7, 0xc1, 0xc1, 0xc1, 0xc1, 0xf7, 0xe3, 0xe3, 0x14, 0x3e, 0x3e, 0x3e, 0x3e, 0x14, 0xe3,  
            0x00, 0x00, 0x07, 0x0f, 0x0c, 0x1b, 0x1b, 0x1b, 0xff, 0xff, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0,  
            0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x9f, 0x9f, 0x9f,  
            0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x0f, 0x0f, 0x07, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf3, 0xf0, 0xf8,  
            0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x3f, 0x3f, 0x7f,  
            0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x70, 0x1f, 0x10, 0x70, 0x7f, 0x7f, 0x7f,  
            0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xf8, 0x00, 0x03, 0xfb, 0xfb, 0xfb,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xef, 0x7c, 0x7b, 0x76, 0x75, 0x75, 0x77, 0x17, 0x67,  
            0xff, 0xdf, 0xef, 0xaf, 0xaf, 0x6f, 0xef, 0xe7, 0x3b, 0xfb, 0x7b, 0xfb, 0xfb, 0xf3, 0xf8, 0xf3,  
            0x1f, 0x1f, 0x3f, 0x3f, 0x70, 0x63, 0xe7, 0xe5, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3c, 0x78, 0x7a,  
            0xf0, 0xf0, 0xf8, 0xf8, 0x0c, 0xc4, 0xe4, 0xa6, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0x3e, 0x1e, 0x5f,  
            0xe9, 0xe9, 0xe9, 0xef, 0xe2, 0xe3, 0xf0, 0xff, 0x76, 0x76, 0x76, 0x70, 0x7d, 0x7c, 0x7f, 0x7f,  
            0x96, 0x96, 0x96, 0xf6, 0x46, 0xc6, 0x0e, 0xfe, 0x6f, 0x6f, 0x6f, 0x0f, 0xbf, 0x3f, 0xff, 0xff,  
            0x00, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0xff, 0xf0, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xff,  
            0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
            0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80,  
            0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01,  
            0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf8, 0xfe, 0xff,  
            0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0x7f, 0x1f, 0x07, 0x03, 0x03, 0x01, 0x81,  
            0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0,  
            0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f,  
            0x1f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xfe, 0xfc, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f,  
            0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  
            0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0xfe, 0x7e, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff,  
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x01, 0x01, 0x03, 0x07, 0x03, 0x01, 0x01,  
            0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x7e, 0x7c, 0x7c, 0x78, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xfe, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf8, 0xfe, 0xff,  
            0x3f, 0xbf, 0xff, 0xff, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0x7f, 0x1f, 0x07, 0x03, 0x03, 0x01, 0x81,  
            0x7f, 0x7f, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,  
            0x81, 0xc3, 0xc3, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,  
            0x0f, 0x43, 0x5b, 0x53, 0x31, 0x19, 0x0f, 0x07, 0xf2, 0xfe, 0xfe, 0xff, 0xff, 0xef, 0xf7, 0xf8,  
            0xc1, 0xc3, 0xc6, 0x84, 0xfc, 0xfc, 0x0e, 0x02, 0xbf, 0xbe, 0xbd, 0x7b, 0x7b, 0x07, 0xf3, 0xfd,  
            0x10, 0x20, 0x22, 0xba, 0xe6, 0xe1, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0x67, 0x59, 0x9e, 0xbf, 0xbf,  
            0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfe,  
            0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x7f,  
            0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
            0x00, 0x08, 0x10, 0x22, 0x24, 0x44, 0x48, 0x08, 0x03, 0x07, 0x0c, 0x19, 0x13, 0x33, 0x27, 0x67,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x6f, 0x77, 0x37, 0x3b, 0x1c, 0x0f, 0x03,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0x1c, 0xee, 0xf6, 0xf7, 0xfb, 0xfb,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xfb, 0xf7, 0xf6, 0xee, 0x1c, 0xf8, 0xe0,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1f, 0x0f, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0x18, 0x18, 0x18,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,  
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0x00,  
            0x30, 0x38, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,  
            0xe4, 0xf6, 0xde, 0xde, 0xfe, 0xf6, 0xd3, 0x49, 0x00, 0x62, 0x4a, 0x4a, 0x1a, 0x52, 0x40, 0x49,  
            0xb8, 0xfc, 0xf6, 0xfe, 0xfc, 0xf6, 0xfe, 0x9c, 0x00, 0x58, 0x52, 0x46, 0x58, 0x52, 0xc6, 0x9c,  
            0xf7, 0xff, 0xc6, 0xf6, 0xfe, 0xc6, 0xf6, 0x7a, 0x00, 0x7b, 0x42, 0x02, 0x7a, 0x42, 0x02, 0x7a,  
            0x38, 0xbc, 0xf6, 0xf6, 0xf6, 0xf6, 0xfe, 0x5c, 0x00, 0x18, 0x52, 0x52, 0x52, 0x52, 0x46, 0x5c,  
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
        ];

        let background = vec![
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 1
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 2
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 3
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 4
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 5
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 6
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 7
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 8
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 9
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 10
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 11
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 12
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 13
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 14
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 15
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 16
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 17
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 18
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 19
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 20
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 21
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 22
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 23
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x24, 0x24,  // row 24
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,  // brick bottoms
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 25
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 26
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x45, 0x45, 0x24, 0x24, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x24, 0x24,  // row 27
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x53, 0x54, 0x24, 0x24,  // some brick tops
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 28
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 29
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // row 30
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,  // all sky
        ];

        let attr = vec![
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x10, 0x50, 0x10, 0x00, 0x00, 0x00, 0x30,
        ];

        // load test data to ppu

        chr.iter().enumerate().for_each(|(i, x)| {self.ppu_bus.write_u8(i as u16, *x);});
        background.iter().enumerate().for_each(|(i, x)| {self.ppu_bus.write_u8(i as u16 + 0x2000, *x);});
        attr.iter().enumerate().for_each(|(i, x)| {self.ppu_bus.write_u8(i as u16 + 0x23c0, *x);});
    }

}